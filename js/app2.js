// Generated by CoffeeScript 1.7.1
(function() {
  var $webgl, URL, animate, camera, clock, controls, effect, fullscreen, init, initCam, initWebgl, lCamCtx, lCamEle, model, onceVibrate, rCamCtx, rCamEle, render, renderer, resize, scene, setOrientationControls, update, videoEle, videoPlaying;

  clock = new THREE.Clock;

  $webgl = $('#webgl');

  renderer = null;

  camera = null;

  effect = null;

  scene = null;

  controls = null;

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

  URL = window.URL || window.webkitURL;

  videoEle = $('#video').get(0);

  lCamEle = $('#leftcam').get(0);

  lCamCtx = lCamEle.getContext("2d");

  rCamEle = $('#rightcam').get(0);

  rCamCtx = rCamEle.getContext("2d");

  videoPlaying = false;

  model = null;

  fullscreen = function() {
    if (container.requestFullscreen) {
      return container.requestFullscreen();
    }
    if (container.msRequestFullscreen) {
      return container.msRequestFullscreen();
    }
    if (container.mozRequestFullScreen) {
      return container.mozRequestFullScreen();
    }
    if (container.webkitRequestFullscreen) {
      return container.webkitRequestFullscreen();
    }
  };

  setOrientationControls = function(e) {
    if (!e.alpha) {
      return;
    }
    controls = new THREE.DeviceOrientationControls(camera, true);
    controls.connect();
    controls.update();
    renderer.domElement.addEventListener('click', fullscreen, false);
    return window.removeEventListener('deviceorientation', setOrientationControls, true);
  };

  initCam = function() {
    return MediaStreamTrack.getSources(function(data) {
      var sourceId;
      sourceId = null;
      data.forEach(function(sourceInfo) {
        if (sourceInfo.kind === 'video') {
          return sourceId = sourceInfo.id;
        }
      });
      return navigator.getUserMedia({
        video: {
          optional: [
            {
              sourceId: sourceId
            }, {
              minWidth: 640
            }, {
              maxWidth: 640
            }, {
              minHeight: 480
            }, {
              maxHeight: 480
            }
          ]
        }
      }, function(stream) {
        videoEle.src = URL.createObjectURL(stream);
        videoEle.autoplay = true;
        videoEle.play();
        return setTimeout(function() {
          return videoPlaying = true;
        }, 100);
      }, function() {
        return console.log("err=", arguments);
      });
    });
  };

  initWebgl = function() {
    var grid, light, loader;
    renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true
    });
    renderer.setClearColor(0x000000, 0);
    $webgl.append(renderer.domElement);
    effect = new THREE.StereoEffect(renderer);
    scene = new THREE.Scene;
    camera = new THREE.PerspectiveCamera(90, 1, 0.001, 700);
    camera.position.set(0, 150, 0);
    scene.add(camera);
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.rotateUp(Math.PI / 4);
    controls.target.set(camera.position.x + 0.1, camera.position.y, camera.position.z);
    controls.noZoom = true;
    controls.noPan = true;
    window.addEventListener('deviceorientation', setOrientationControls, true);
    light = new THREE.HemisphereLight(0x777777, 0x000000, 0.6);
    scene.add(light);
    light = new THREE.DirectionalLight(0xffffff, 2);
    light.position.set(1, 1, 1).normalize();
    scene.add(light);
    grid = new THREE.GridHelper(1000, 100);
    loader = new THREE.JSONLoader;
    return loader.load('objects/Chair.json', function(geometry, materials) {
      model = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials));
      model.position.set(30, 0, -150);
      model.scale.set(100, 100, 100);
      return scene.add(model);
    });
  };

  onceVibrate = _.once(function() {
    return typeof navigator.vibrate === "function" ? navigator.vibrate([300, 300, 300]) : void 0;
  });

  init = function() {
    var conn, id, peer;
    initCam();
    initWebgl();
    peer = new Peer({
      host: 'peerjs-kamata.herokuapp.com',
      secure: true,
      port: 443,
      key: 'peerjs',
      debug: 3
    });
    id = location.hash.replace('#', '');
    if (id) {
      conn = peer.connect(id);
      return conn.on("data", function(pos) {
        onceVibrate();
        return model.position.set(pos[0] * 50, pos[1] * 50, pos[2] * 50);
      });
    }
  };

  resize = function() {
    var height, width;
    width = $webgl.width();
    height = $webgl.height();
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
    return effect.setSize(width, height);
  };

  render = function() {
    return effect.render(scene, camera);
  };

  update = function(dt) {
    resize();
    camera.updateProjectionMatrix();
    return controls.update(dt);
  };

  animate = function() {
    requestAnimationFrame(animate);
    if (videoPlaying) {
      lCamCtx.drawImage(videoEle, 0, 0, videoEle.videoWidth, videoEle.videoHeight, 0, 0, lCamEle.width, lCamEle.height);
      rCamCtx.drawImage(videoEle, 0, 0, videoEle.videoWidth, videoEle.videoHeight, 0, 0, rCamEle.width, rCamEle.height);
    }
    update(clock.getDelta());
    return render();
  };

  init();

  animate();

}).call(this);

//# sourceMappingURL=app2.map
